import fs from 'fs';
import path from 'path';

const localesDir = path.resolve(__dirname, '../locales');
const outputFile = path.resolve(__dirname, '../src/resources.ts');

const resources: Record<string, Record<string, string>> = {};
const importStatements: string[] = [];

const namespaces = fs
  .readdirSync(localesDir)
  .filter((file) => fs.statSync(path.join(localesDir, file)).isDirectory());

namespaces.forEach((ns) => {
  const nsDir = path.join(localesDir, ns);
  const files = fs.readdirSync(nsDir).filter((f) => f.endsWith('.json'));
  files.forEach((file) => {
    const lang = path.basename(file, '.json');
    const importVar = `${ns}_${lang}`.replace(/[^a-zA-Z0-9_]/g, '_');
    const relPath = path
      .relative(path.join(__dirname, '../src'), path.join(nsDir, file))
      .replace(/\\/g, '/');
    importStatements.push(
      `import ${importVar} from '${relPath.startsWith('.') ? relPath : './' + relPath}';`
    );
    if (!resources[lang]) resources[lang] = {};
    resources[lang][ns] = importVar;
  });
});

const lines = [
  '// AUTO-GENERATED by scripts/generateResources.ts',
  ...importStatements,
  'const resources: any = {};',
];

Object.entries(resources).forEach(([lang, namespaces]) => {
  lines.push(`resources['${lang}'] = {`);
  Object.entries(namespaces).forEach(([ns, importVar]) => {
    lines.push(`  '${ns}': ${importVar},`);
  });
  lines.push('};');
});

lines.push('export default resources;');

fs.writeFileSync(outputFile, lines.join('\n'));
console.log(
  'resources.ts generated with care! Thanks for translating your project!'
);
